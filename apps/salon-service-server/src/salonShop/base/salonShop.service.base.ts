/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SalonShop as PrismaSalonShop } from "@prisma/client";
import { SalonShopXmlDto } from "../SalonShopXmlDto";

export class SalonShopServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalonShopCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salonShop.count(args);
  }

  async salonShops<T extends Prisma.SalonShopFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalonShopFindManyArgs>
  ): Promise<PrismaSalonShop[]> {
    return this.prisma.salonShop.findMany<Prisma.SalonShopFindManyArgs>(args);
  }
  async salonShop<T extends Prisma.SalonShopFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalonShopFindUniqueArgs>
  ): Promise<PrismaSalonShop | null> {
    return this.prisma.salonShop.findUnique(args);
  }
  async createSalonShop<T extends Prisma.SalonShopCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalonShopCreateArgs>
  ): Promise<PrismaSalonShop> {
    return this.prisma.salonShop.create<T>(args);
  }
  async updateSalonShop<T extends Prisma.SalonShopUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalonShopUpdateArgs>
  ): Promise<PrismaSalonShop> {
    return this.prisma.salonShop.update<T>(args);
  }
  async deleteSalonShop<T extends Prisma.SalonShopDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalonShopDeleteArgs>
  ): Promise<PrismaSalonShop> {
    return this.prisma.salonShop.delete(args);
  }
  async GetSalonShopsAsXml(args: string[]): Promise<SalonShopXmlDto[]> {
    throw new Error("Not implemented");
  }
}
