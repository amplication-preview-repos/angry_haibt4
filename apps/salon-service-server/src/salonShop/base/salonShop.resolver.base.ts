/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalonShop } from "./SalonShop";
import { SalonShopCountArgs } from "./SalonShopCountArgs";
import { SalonShopFindManyArgs } from "./SalonShopFindManyArgs";
import { SalonShopFindUniqueArgs } from "./SalonShopFindUniqueArgs";
import { CreateSalonShopArgs } from "./CreateSalonShopArgs";
import { UpdateSalonShopArgs } from "./UpdateSalonShopArgs";
import { DeleteSalonShopArgs } from "./DeleteSalonShopArgs";
import { SalonShopXmlDto } from "../SalonShopXmlDto";
import { SalonShopService } from "../salonShop.service";
@graphql.Resolver(() => SalonShop)
export class SalonShopResolverBase {
  constructor(protected readonly service: SalonShopService) {}

  async _salonShopsMeta(
    @graphql.Args() args: SalonShopCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalonShop])
  async salonShops(
    @graphql.Args() args: SalonShopFindManyArgs
  ): Promise<SalonShop[]> {
    return this.service.salonShops(args);
  }

  @graphql.Query(() => SalonShop, { nullable: true })
  async salonShop(
    @graphql.Args() args: SalonShopFindUniqueArgs
  ): Promise<SalonShop | null> {
    const result = await this.service.salonShop(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalonShop)
  async createSalonShop(
    @graphql.Args() args: CreateSalonShopArgs
  ): Promise<SalonShop> {
    return await this.service.createSalonShop({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalonShop)
  async updateSalonShop(
    @graphql.Args() args: UpdateSalonShopArgs
  ): Promise<SalonShop | null> {
    try {
      return await this.service.updateSalonShop({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalonShop)
  async deleteSalonShop(
    @graphql.Args() args: DeleteSalonShopArgs
  ): Promise<SalonShop | null> {
    try {
      return await this.service.deleteSalonShop(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => [SalonShopXmlDto])
  async GetSalonShopsAsXml(
    @graphql.Args()
    args: string[]
  ): Promise<SalonShopXmlDto[]> {
    return this.service.GetSalonShopsAsXml(args);
  }
}
